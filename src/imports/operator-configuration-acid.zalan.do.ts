// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema OperatorConfiguration
 */
export class OperatorConfiguration extends ApiObject {
  /**
   * Returns the apiVersion and kind for "OperatorConfiguration"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'acid.zalan.do/v1',
    kind: 'OperatorConfiguration',
  };

  /**
   * Renders a Kubernetes manifest for "OperatorConfiguration".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: OperatorConfigurationProps): any {
    return {
      ...OperatorConfiguration.GVK,
      ...toJson_OperatorConfigurationProps(props),
    };
  }

  /**
   * Defines a "OperatorConfiguration" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: OperatorConfigurationProps) {
    super(scope, id, {
      ...OperatorConfiguration.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...OperatorConfiguration.GVK,
      ...toJson_OperatorConfigurationProps(resolved),
    };
  }
}

/**
 * @schema OperatorConfiguration
 */
export interface OperatorConfigurationProps {
  /**
   * @schema OperatorConfiguration#configuration
   */
  readonly configuration: OperatorConfigurationConfiguration;

  /**
   * @schema OperatorConfiguration#metadata
   */
  readonly metadata?: ApiObjectMetadata;

}

/**
 * Converts an object of type 'OperatorConfigurationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationProps(obj: OperatorConfigurationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'configuration': toJson_OperatorConfigurationConfiguration(obj.configuration),
    'metadata': obj.metadata,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfiguration
 */
export interface OperatorConfigurationConfiguration {
  /**
   * @schema OperatorConfigurationConfiguration#crd_categories
   */
  readonly crdCategories?: string[];

  /**
   * @schema OperatorConfigurationConfiguration#docker_image
   */
  readonly dockerImage?: string;

  /**
   * @schema OperatorConfigurationConfiguration#enable_crd_registration
   */
  readonly enableCrdRegistration?: boolean;

  /**
   * deprecated
   *
   * @schema OperatorConfigurationConfiguration#enable_crd_validation
   */
  readonly enableCrdValidation?: boolean;

  /**
   * @schema OperatorConfigurationConfiguration#enable_lazy_spilo_upgrade
   */
  readonly enableLazySpiloUpgrade?: boolean;

  /**
   * @schema OperatorConfigurationConfiguration#enable_pgversion_env_var
   */
  readonly enablePgversionEnvVar?: boolean;

  /**
   * @schema OperatorConfigurationConfiguration#enable_shm_volume
   */
  readonly enableShmVolume?: boolean;

  /**
   * @schema OperatorConfigurationConfiguration#enable_spilo_wal_path_compat
   */
  readonly enableSpiloWalPathCompat?: boolean;

  /**
   * @schema OperatorConfigurationConfiguration#etcd_host
   */
  readonly etcdHost?: string;

  /**
   * @schema OperatorConfigurationConfiguration#kubernetes_use_configmaps
   */
  readonly kubernetesUseConfigmaps?: boolean;

  /**
   * -1 = disabled
   *
   * @schema OperatorConfigurationConfiguration#max_instances
   */
  readonly maxInstances?: number;

  /**
   * -1 = disabled
   *
   * @schema OperatorConfigurationConfiguration#min_instances
   */
  readonly minInstances?: number;

  /**
   * @schema OperatorConfigurationConfiguration#resync_period
   */
  readonly resyncPeriod?: string;

  /**
   * @schema OperatorConfigurationConfiguration#repair_period
   */
  readonly repairPeriod?: string;

  /**
   * @schema OperatorConfigurationConfiguration#set_memory_request_to_limit
   */
  readonly setMemoryRequestToLimit?: boolean;

  /**
   * @schema OperatorConfigurationConfiguration#sidecar_docker_images
   */
  readonly sidecarDockerImages?: { [key: string]: string };

  /**
   * @schema OperatorConfigurationConfiguration#sidecars
   */
  readonly sidecars?: any[];

  /**
   * @schema OperatorConfigurationConfiguration#workers
   */
  readonly workers?: number;

  /**
   * @schema OperatorConfigurationConfiguration#users
   */
  readonly users?: OperatorConfigurationConfigurationUsers;

  /**
   * @schema OperatorConfigurationConfiguration#major_version_upgrade
   */
  readonly majorVersionUpgrade?: OperatorConfigurationConfigurationMajorVersionUpgrade;

  /**
   * @schema OperatorConfigurationConfiguration#kubernetes
   */
  readonly kubernetes?: OperatorConfigurationConfigurationKubernetes;

  /**
   * @schema OperatorConfigurationConfiguration#postgres_pod_resources
   */
  readonly postgresPodResources?: OperatorConfigurationConfigurationPostgresPodResources;

  /**
   * @schema OperatorConfigurationConfiguration#timeouts
   */
  readonly timeouts?: OperatorConfigurationConfigurationTimeouts;

  /**
   * @schema OperatorConfigurationConfiguration#load_balancer
   */
  readonly loadBalancer?: OperatorConfigurationConfigurationLoadBalancer;

  /**
   * @schema OperatorConfigurationConfiguration#aws_or_gcp
   */
  readonly awsOrGcp?: OperatorConfigurationConfigurationAwsOrGcp;

  /**
   * @schema OperatorConfigurationConfiguration#logical_backup
   */
  readonly logicalBackup?: OperatorConfigurationConfigurationLogicalBackup;

  /**
   * @schema OperatorConfigurationConfiguration#debug
   */
  readonly debug?: OperatorConfigurationConfigurationDebug;

  /**
   * @schema OperatorConfigurationConfiguration#teams_api
   */
  readonly teamsApi?: OperatorConfigurationConfigurationTeamsApi;

  /**
   * @schema OperatorConfigurationConfiguration#logging_rest_api
   */
  readonly loggingRestApi?: OperatorConfigurationConfigurationLoggingRestApi;

  /**
   * @schema OperatorConfigurationConfiguration#scalyr
   */
  readonly scalyr?: OperatorConfigurationConfigurationScalyr;

  /**
   * @schema OperatorConfigurationConfiguration#connection_pooler
   */
  readonly connectionPooler?: OperatorConfigurationConfigurationConnectionPooler;

}

/**
 * Converts an object of type 'OperatorConfigurationConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationConfiguration(obj: OperatorConfigurationConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'crd_categories': obj.crdCategories?.map(y => y),
    'docker_image': obj.dockerImage,
    'enable_crd_registration': obj.enableCrdRegistration,
    'enable_crd_validation': obj.enableCrdValidation,
    'enable_lazy_spilo_upgrade': obj.enableLazySpiloUpgrade,
    'enable_pgversion_env_var': obj.enablePgversionEnvVar,
    'enable_shm_volume': obj.enableShmVolume,
    'enable_spilo_wal_path_compat': obj.enableSpiloWalPathCompat,
    'etcd_host': obj.etcdHost,
    'kubernetes_use_configmaps': obj.kubernetesUseConfigmaps,
    'max_instances': obj.maxInstances,
    'min_instances': obj.minInstances,
    'resync_period': obj.resyncPeriod,
    'repair_period': obj.repairPeriod,
    'set_memory_request_to_limit': obj.setMemoryRequestToLimit,
    'sidecar_docker_images': ((obj.sidecarDockerImages) === undefined) ? undefined : (Object.entries(obj.sidecarDockerImages).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'sidecars': obj.sidecars?.map(y => y),
    'workers': obj.workers,
    'users': toJson_OperatorConfigurationConfigurationUsers(obj.users),
    'major_version_upgrade': toJson_OperatorConfigurationConfigurationMajorVersionUpgrade(obj.majorVersionUpgrade),
    'kubernetes': toJson_OperatorConfigurationConfigurationKubernetes(obj.kubernetes),
    'postgres_pod_resources': toJson_OperatorConfigurationConfigurationPostgresPodResources(obj.postgresPodResources),
    'timeouts': toJson_OperatorConfigurationConfigurationTimeouts(obj.timeouts),
    'load_balancer': toJson_OperatorConfigurationConfigurationLoadBalancer(obj.loadBalancer),
    'aws_or_gcp': toJson_OperatorConfigurationConfigurationAwsOrGcp(obj.awsOrGcp),
    'logical_backup': toJson_OperatorConfigurationConfigurationLogicalBackup(obj.logicalBackup),
    'debug': toJson_OperatorConfigurationConfigurationDebug(obj.debug),
    'teams_api': toJson_OperatorConfigurationConfigurationTeamsApi(obj.teamsApi),
    'logging_rest_api': toJson_OperatorConfigurationConfigurationLoggingRestApi(obj.loggingRestApi),
    'scalyr': toJson_OperatorConfigurationConfigurationScalyr(obj.scalyr),
    'connection_pooler': toJson_OperatorConfigurationConfigurationConnectionPooler(obj.connectionPooler),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfigurationUsers
 */
export interface OperatorConfigurationConfigurationUsers {
  /**
   * @schema OperatorConfigurationConfigurationUsers#additional_owner_roles
   */
  readonly additionalOwnerRoles?: string[];

  /**
   * @schema OperatorConfigurationConfigurationUsers#enable_password_rotation
   */
  readonly enablePasswordRotation?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationUsers#password_rotation_interval
   */
  readonly passwordRotationInterval?: number;

  /**
   * @schema OperatorConfigurationConfigurationUsers#password_rotation_user_retention
   */
  readonly passwordRotationUserRetention?: number;

  /**
   * @schema OperatorConfigurationConfigurationUsers#replication_username
   */
  readonly replicationUsername?: string;

  /**
   * @schema OperatorConfigurationConfigurationUsers#super_username
   */
  readonly superUsername?: string;

}

/**
 * Converts an object of type 'OperatorConfigurationConfigurationUsers' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationConfigurationUsers(obj: OperatorConfigurationConfigurationUsers | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additional_owner_roles': obj.additionalOwnerRoles?.map(y => y),
    'enable_password_rotation': obj.enablePasswordRotation,
    'password_rotation_interval': obj.passwordRotationInterval,
    'password_rotation_user_retention': obj.passwordRotationUserRetention,
    'replication_username': obj.replicationUsername,
    'super_username': obj.superUsername,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfigurationMajorVersionUpgrade
 */
export interface OperatorConfigurationConfigurationMajorVersionUpgrade {
  /**
   * @schema OperatorConfigurationConfigurationMajorVersionUpgrade#major_version_upgrade_mode
   */
  readonly majorVersionUpgradeMode?: string;

  /**
   * @schema OperatorConfigurationConfigurationMajorVersionUpgrade#major_version_upgrade_team_allow_list
   */
  readonly majorVersionUpgradeTeamAllowList?: string[];

  /**
   * @schema OperatorConfigurationConfigurationMajorVersionUpgrade#minimal_major_version
   */
  readonly minimalMajorVersion?: string;

  /**
   * @schema OperatorConfigurationConfigurationMajorVersionUpgrade#target_major_version
   */
  readonly targetMajorVersion?: string;

}

/**
 * Converts an object of type 'OperatorConfigurationConfigurationMajorVersionUpgrade' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationConfigurationMajorVersionUpgrade(obj: OperatorConfigurationConfigurationMajorVersionUpgrade | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'major_version_upgrade_mode': obj.majorVersionUpgradeMode,
    'major_version_upgrade_team_allow_list': obj.majorVersionUpgradeTeamAllowList?.map(y => y),
    'minimal_major_version': obj.minimalMajorVersion,
    'target_major_version': obj.targetMajorVersion,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfigurationKubernetes
 */
export interface OperatorConfigurationConfigurationKubernetes {
  /**
   * @schema OperatorConfigurationConfigurationKubernetes#additional_pod_capabilities
   */
  readonly additionalPodCapabilities?: string[];

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#cluster_domain
   */
  readonly clusterDomain?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#cluster_labels
   */
  readonly clusterLabels?: { [key: string]: string };

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#cluster_name_label
   */
  readonly clusterNameLabel?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#custom_pod_annotations
   */
  readonly customPodAnnotations?: { [key: string]: string };

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#delete_annotation_date_key
   */
  readonly deleteAnnotationDateKey?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#delete_annotation_name_key
   */
  readonly deleteAnnotationNameKey?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#downscaler_annotations
   */
  readonly downscalerAnnotations?: string[];

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#enable_cross_namespace_secret
   */
  readonly enableCrossNamespaceSecret?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#enable_init_containers
   */
  readonly enableInitContainers?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#enable_pod_antiaffinity
   */
  readonly enablePodAntiaffinity?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#enable_pod_disruption_budget
   */
  readonly enablePodDisruptionBudget?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#enable_sidecars
   */
  readonly enableSidecars?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#ignored_annotations
   */
  readonly ignoredAnnotations?: string[];

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#infrastructure_roles_secret_name
   */
  readonly infrastructureRolesSecretName?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#infrastructure_roles_secrets
   */
  readonly infrastructureRolesSecrets?: OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets[];

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#inherited_annotations
   */
  readonly inheritedAnnotations?: string[];

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#inherited_labels
   */
  readonly inheritedLabels?: string[];

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#master_pod_move_timeout
   */
  readonly masterPodMoveTimeout?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#node_readiness_label
   */
  readonly nodeReadinessLabel?: { [key: string]: string };

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#node_readiness_label_merge
   */
  readonly nodeReadinessLabelMerge?: OperatorConfigurationConfigurationKubernetesNodeReadinessLabelMerge;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#oauth_token_secret_name
   */
  readonly oauthTokenSecretName?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#pdb_name_format
   */
  readonly pdbNameFormat?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#pod_antiaffinity_topology_key
   */
  readonly podAntiaffinityTopologyKey?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#pod_environment_configmap
   */
  readonly podEnvironmentConfigmap?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#pod_environment_secret
   */
  readonly podEnvironmentSecret?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#pod_management_policy
   */
  readonly podManagementPolicy?: OperatorConfigurationConfigurationKubernetesPodManagementPolicy;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#pod_priority_class_name
   */
  readonly podPriorityClassName?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#pod_role_label
   */
  readonly podRoleLabel?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#pod_service_account_definition
   */
  readonly podServiceAccountDefinition?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#pod_service_account_name
   */
  readonly podServiceAccountName?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#pod_service_account_role_binding_definition
   */
  readonly podServiceAccountRoleBindingDefinition?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#pod_terminate_grace_period
   */
  readonly podTerminateGracePeriod?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#secret_name_template
   */
  readonly secretNameTemplate?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#spilo_allow_privilege_escalation
   */
  readonly spiloAllowPrivilegeEscalation?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#spilo_runasuser
   */
  readonly spiloRunasuser?: number;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#spilo_runasgroup
   */
  readonly spiloRunasgroup?: number;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#spilo_fsgroup
   */
  readonly spiloFsgroup?: number;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#spilo_privileged
   */
  readonly spiloPrivileged?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#storage_resize_mode
   */
  readonly storageResizeMode?: OperatorConfigurationConfigurationKubernetesStorageResizeMode;

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#toleration
   */
  readonly toleration?: { [key: string]: string };

  /**
   * @schema OperatorConfigurationConfigurationKubernetes#watched_namespace
   */
  readonly watchedNamespace?: string;

}

/**
 * Converts an object of type 'OperatorConfigurationConfigurationKubernetes' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationConfigurationKubernetes(obj: OperatorConfigurationConfigurationKubernetes | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additional_pod_capabilities': obj.additionalPodCapabilities?.map(y => y),
    'cluster_domain': obj.clusterDomain,
    'cluster_labels': ((obj.clusterLabels) === undefined) ? undefined : (Object.entries(obj.clusterLabels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'cluster_name_label': obj.clusterNameLabel,
    'custom_pod_annotations': ((obj.customPodAnnotations) === undefined) ? undefined : (Object.entries(obj.customPodAnnotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'delete_annotation_date_key': obj.deleteAnnotationDateKey,
    'delete_annotation_name_key': obj.deleteAnnotationNameKey,
    'downscaler_annotations': obj.downscalerAnnotations?.map(y => y),
    'enable_cross_namespace_secret': obj.enableCrossNamespaceSecret,
    'enable_init_containers': obj.enableInitContainers,
    'enable_pod_antiaffinity': obj.enablePodAntiaffinity,
    'enable_pod_disruption_budget': obj.enablePodDisruptionBudget,
    'enable_sidecars': obj.enableSidecars,
    'ignored_annotations': obj.ignoredAnnotations?.map(y => y),
    'infrastructure_roles_secret_name': obj.infrastructureRolesSecretName,
    'infrastructure_roles_secrets': obj.infrastructureRolesSecrets?.map(y => toJson_OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets(y)),
    'inherited_annotations': obj.inheritedAnnotations?.map(y => y),
    'inherited_labels': obj.inheritedLabels?.map(y => y),
    'master_pod_move_timeout': obj.masterPodMoveTimeout,
    'node_readiness_label': ((obj.nodeReadinessLabel) === undefined) ? undefined : (Object.entries(obj.nodeReadinessLabel).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'node_readiness_label_merge': obj.nodeReadinessLabelMerge,
    'oauth_token_secret_name': obj.oauthTokenSecretName,
    'pdb_name_format': obj.pdbNameFormat,
    'pod_antiaffinity_topology_key': obj.podAntiaffinityTopologyKey,
    'pod_environment_configmap': obj.podEnvironmentConfigmap,
    'pod_environment_secret': obj.podEnvironmentSecret,
    'pod_management_policy': obj.podManagementPolicy,
    'pod_priority_class_name': obj.podPriorityClassName,
    'pod_role_label': obj.podRoleLabel,
    'pod_service_account_definition': obj.podServiceAccountDefinition,
    'pod_service_account_name': obj.podServiceAccountName,
    'pod_service_account_role_binding_definition': obj.podServiceAccountRoleBindingDefinition,
    'pod_terminate_grace_period': obj.podTerminateGracePeriod,
    'secret_name_template': obj.secretNameTemplate,
    'spilo_allow_privilege_escalation': obj.spiloAllowPrivilegeEscalation,
    'spilo_runasuser': obj.spiloRunasuser,
    'spilo_runasgroup': obj.spiloRunasgroup,
    'spilo_fsgroup': obj.spiloFsgroup,
    'spilo_privileged': obj.spiloPrivileged,
    'storage_resize_mode': obj.storageResizeMode,
    'toleration': ((obj.toleration) === undefined) ? undefined : (Object.entries(obj.toleration).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'watched_namespace': obj.watchedNamespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfigurationPostgresPodResources
 */
export interface OperatorConfigurationConfigurationPostgresPodResources {
  /**
   * @schema OperatorConfigurationConfigurationPostgresPodResources#default_cpu_limit
   */
  readonly defaultCpuLimit?: string;

  /**
   * @schema OperatorConfigurationConfigurationPostgresPodResources#default_cpu_request
   */
  readonly defaultCpuRequest?: string;

  /**
   * @schema OperatorConfigurationConfigurationPostgresPodResources#default_memory_limit
   */
  readonly defaultMemoryLimit?: string;

  /**
   * @schema OperatorConfigurationConfigurationPostgresPodResources#default_memory_request
   */
  readonly defaultMemoryRequest?: string;

  /**
   * @schema OperatorConfigurationConfigurationPostgresPodResources#min_cpu_limit
   */
  readonly minCpuLimit?: string;

  /**
   * @schema OperatorConfigurationConfigurationPostgresPodResources#min_memory_limit
   */
  readonly minMemoryLimit?: string;

}

/**
 * Converts an object of type 'OperatorConfigurationConfigurationPostgresPodResources' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationConfigurationPostgresPodResources(obj: OperatorConfigurationConfigurationPostgresPodResources | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'default_cpu_limit': obj.defaultCpuLimit,
    'default_cpu_request': obj.defaultCpuRequest,
    'default_memory_limit': obj.defaultMemoryLimit,
    'default_memory_request': obj.defaultMemoryRequest,
    'min_cpu_limit': obj.minCpuLimit,
    'min_memory_limit': obj.minMemoryLimit,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfigurationTimeouts
 */
export interface OperatorConfigurationConfigurationTimeouts {
  /**
   * @schema OperatorConfigurationConfigurationTimeouts#patroni_api_check_interval
   */
  readonly patroniApiCheckInterval?: string;

  /**
   * @schema OperatorConfigurationConfigurationTimeouts#patroni_api_check_timeout
   */
  readonly patroniApiCheckTimeout?: string;

  /**
   * @schema OperatorConfigurationConfigurationTimeouts#pod_label_wait_timeout
   */
  readonly podLabelWaitTimeout?: string;

  /**
   * @schema OperatorConfigurationConfigurationTimeouts#pod_deletion_wait_timeout
   */
  readonly podDeletionWaitTimeout?: string;

  /**
   * @schema OperatorConfigurationConfigurationTimeouts#ready_wait_interval
   */
  readonly readyWaitInterval?: string;

  /**
   * @schema OperatorConfigurationConfigurationTimeouts#ready_wait_timeout
   */
  readonly readyWaitTimeout?: string;

  /**
   * @schema OperatorConfigurationConfigurationTimeouts#resource_check_interval
   */
  readonly resourceCheckInterval?: string;

  /**
   * @schema OperatorConfigurationConfigurationTimeouts#resource_check_timeout
   */
  readonly resourceCheckTimeout?: string;

}

/**
 * Converts an object of type 'OperatorConfigurationConfigurationTimeouts' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationConfigurationTimeouts(obj: OperatorConfigurationConfigurationTimeouts | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'patroni_api_check_interval': obj.patroniApiCheckInterval,
    'patroni_api_check_timeout': obj.patroniApiCheckTimeout,
    'pod_label_wait_timeout': obj.podLabelWaitTimeout,
    'pod_deletion_wait_timeout': obj.podDeletionWaitTimeout,
    'ready_wait_interval': obj.readyWaitInterval,
    'ready_wait_timeout': obj.readyWaitTimeout,
    'resource_check_interval': obj.resourceCheckInterval,
    'resource_check_timeout': obj.resourceCheckTimeout,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfigurationLoadBalancer
 */
export interface OperatorConfigurationConfigurationLoadBalancer {
  /**
   * @schema OperatorConfigurationConfigurationLoadBalancer#custom_service_annotations
   */
  readonly customServiceAnnotations?: { [key: string]: string };

  /**
   * @schema OperatorConfigurationConfigurationLoadBalancer#db_hosted_zone
   */
  readonly dbHostedZone?: string;

  /**
   * @schema OperatorConfigurationConfigurationLoadBalancer#enable_master_load_balancer
   */
  readonly enableMasterLoadBalancer?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationLoadBalancer#enable_master_pooler_load_balancer
   */
  readonly enableMasterPoolerLoadBalancer?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationLoadBalancer#enable_replica_load_balancer
   */
  readonly enableReplicaLoadBalancer?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationLoadBalancer#enable_replica_pooler_load_balancer
   */
  readonly enableReplicaPoolerLoadBalancer?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationLoadBalancer#external_traffic_policy
   */
  readonly externalTrafficPolicy?: OperatorConfigurationConfigurationLoadBalancerExternalTrafficPolicy;

  /**
   * @schema OperatorConfigurationConfigurationLoadBalancer#master_dns_name_format
   */
  readonly masterDnsNameFormat?: string;

  /**
   * @schema OperatorConfigurationConfigurationLoadBalancer#replica_dns_name_format
   */
  readonly replicaDnsNameFormat?: string;

}

/**
 * Converts an object of type 'OperatorConfigurationConfigurationLoadBalancer' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationConfigurationLoadBalancer(obj: OperatorConfigurationConfigurationLoadBalancer | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'custom_service_annotations': ((obj.customServiceAnnotations) === undefined) ? undefined : (Object.entries(obj.customServiceAnnotations).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'db_hosted_zone': obj.dbHostedZone,
    'enable_master_load_balancer': obj.enableMasterLoadBalancer,
    'enable_master_pooler_load_balancer': obj.enableMasterPoolerLoadBalancer,
    'enable_replica_load_balancer': obj.enableReplicaLoadBalancer,
    'enable_replica_pooler_load_balancer': obj.enableReplicaPoolerLoadBalancer,
    'external_traffic_policy': obj.externalTrafficPolicy,
    'master_dns_name_format': obj.masterDnsNameFormat,
    'replica_dns_name_format': obj.replicaDnsNameFormat,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfigurationAwsOrGcp
 */
export interface OperatorConfigurationConfigurationAwsOrGcp {
  /**
   * @schema OperatorConfigurationConfigurationAwsOrGcp#additional_secret_mount
   */
  readonly additionalSecretMount?: string;

  /**
   * @schema OperatorConfigurationConfigurationAwsOrGcp#additional_secret_mount_path
   */
  readonly additionalSecretMountPath?: string;

  /**
   * @schema OperatorConfigurationConfigurationAwsOrGcp#aws_region
   */
  readonly awsRegion?: string;

  /**
   * @schema OperatorConfigurationConfigurationAwsOrGcp#enable_ebs_gp3_migration
   */
  readonly enableEbsGp3Migration?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationAwsOrGcp#enable_ebs_gp3_migration_max_size
   */
  readonly enableEbsGp3MigrationMaxSize?: number;

  /**
   * @schema OperatorConfigurationConfigurationAwsOrGcp#gcp_credentials
   */
  readonly gcpCredentials?: string;

  /**
   * @schema OperatorConfigurationConfigurationAwsOrGcp#kube_iam_role
   */
  readonly kubeIamRole?: string;

  /**
   * @schema OperatorConfigurationConfigurationAwsOrGcp#log_s3_bucket
   */
  readonly logS3Bucket?: string;

  /**
   * @schema OperatorConfigurationConfigurationAwsOrGcp#wal_az_storage_account
   */
  readonly walAzStorageAccount?: string;

  /**
   * @schema OperatorConfigurationConfigurationAwsOrGcp#wal_gs_bucket
   */
  readonly walGsBucket?: string;

  /**
   * @schema OperatorConfigurationConfigurationAwsOrGcp#wal_s3_bucket
   */
  readonly walS3Bucket?: string;

}

/**
 * Converts an object of type 'OperatorConfigurationConfigurationAwsOrGcp' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationConfigurationAwsOrGcp(obj: OperatorConfigurationConfigurationAwsOrGcp | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additional_secret_mount': obj.additionalSecretMount,
    'additional_secret_mount_path': obj.additionalSecretMountPath,
    'aws_region': obj.awsRegion,
    'enable_ebs_gp3_migration': obj.enableEbsGp3Migration,
    'enable_ebs_gp3_migration_max_size': obj.enableEbsGp3MigrationMaxSize,
    'gcp_credentials': obj.gcpCredentials,
    'kube_iam_role': obj.kubeIamRole,
    'log_s3_bucket': obj.logS3Bucket,
    'wal_az_storage_account': obj.walAzStorageAccount,
    'wal_gs_bucket': obj.walGsBucket,
    'wal_s3_bucket': obj.walS3Bucket,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfigurationLogicalBackup
 */
export interface OperatorConfigurationConfigurationLogicalBackup {
  /**
   * @schema OperatorConfigurationConfigurationLogicalBackup#logical_backup_docker_image
   */
  readonly logicalBackupDockerImage?: string;

  /**
   * @schema OperatorConfigurationConfigurationLogicalBackup#logical_backup_google_application_credentials
   */
  readonly logicalBackupGoogleApplicationCredentials?: string;

  /**
   * @schema OperatorConfigurationConfigurationLogicalBackup#logical_backup_job_prefix
   */
  readonly logicalBackupJobPrefix?: string;

  /**
   * @schema OperatorConfigurationConfigurationLogicalBackup#logical_backup_provider
   */
  readonly logicalBackupProvider?: string;

  /**
   * @schema OperatorConfigurationConfigurationLogicalBackup#logical_backup_s3_access_key_id
   */
  readonly logicalBackupS3AccessKeyId?: string;

  /**
   * @schema OperatorConfigurationConfigurationLogicalBackup#logical_backup_s3_bucket
   */
  readonly logicalBackupS3Bucket?: string;

  /**
   * @schema OperatorConfigurationConfigurationLogicalBackup#logical_backup_s3_endpoint
   */
  readonly logicalBackupS3Endpoint?: string;

  /**
   * @schema OperatorConfigurationConfigurationLogicalBackup#logical_backup_s3_region
   */
  readonly logicalBackupS3Region?: string;

  /**
   * @schema OperatorConfigurationConfigurationLogicalBackup#logical_backup_s3_secret_access_key
   */
  readonly logicalBackupS3SecretAccessKey?: string;

  /**
   * @schema OperatorConfigurationConfigurationLogicalBackup#logical_backup_s3_sse
   */
  readonly logicalBackupS3Sse?: string;

  /**
   * @schema OperatorConfigurationConfigurationLogicalBackup#logical_backup_s3_retention_time
   */
  readonly logicalBackupS3RetentionTime?: string;

  /**
   * @schema OperatorConfigurationConfigurationLogicalBackup#logical_backup_schedule
   */
  readonly logicalBackupSchedule?: string;

}

/**
 * Converts an object of type 'OperatorConfigurationConfigurationLogicalBackup' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationConfigurationLogicalBackup(obj: OperatorConfigurationConfigurationLogicalBackup | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'logical_backup_docker_image': obj.logicalBackupDockerImage,
    'logical_backup_google_application_credentials': obj.logicalBackupGoogleApplicationCredentials,
    'logical_backup_job_prefix': obj.logicalBackupJobPrefix,
    'logical_backup_provider': obj.logicalBackupProvider,
    'logical_backup_s3_access_key_id': obj.logicalBackupS3AccessKeyId,
    'logical_backup_s3_bucket': obj.logicalBackupS3Bucket,
    'logical_backup_s3_endpoint': obj.logicalBackupS3Endpoint,
    'logical_backup_s3_region': obj.logicalBackupS3Region,
    'logical_backup_s3_secret_access_key': obj.logicalBackupS3SecretAccessKey,
    'logical_backup_s3_sse': obj.logicalBackupS3Sse,
    'logical_backup_s3_retention_time': obj.logicalBackupS3RetentionTime,
    'logical_backup_schedule': obj.logicalBackupSchedule,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfigurationDebug
 */
export interface OperatorConfigurationConfigurationDebug {
  /**
   * @schema OperatorConfigurationConfigurationDebug#debug_logging
   */
  readonly debugLogging?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationDebug#enable_database_access
   */
  readonly enableDatabaseAccess?: boolean;

}

/**
 * Converts an object of type 'OperatorConfigurationConfigurationDebug' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationConfigurationDebug(obj: OperatorConfigurationConfigurationDebug | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'debug_logging': obj.debugLogging,
    'enable_database_access': obj.enableDatabaseAccess,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfigurationTeamsApi
 */
export interface OperatorConfigurationConfigurationTeamsApi {
  /**
   * @schema OperatorConfigurationConfigurationTeamsApi#enable_admin_role_for_users
   */
  readonly enableAdminRoleForUsers?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationTeamsApi#enable_postgres_team_crd
   */
  readonly enablePostgresTeamCrd?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationTeamsApi#enable_postgres_team_crd_superusers
   */
  readonly enablePostgresTeamCrdSuperusers?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationTeamsApi#enable_team_member_deprecation
   */
  readonly enableTeamMemberDeprecation?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationTeamsApi#enable_team_superuser
   */
  readonly enableTeamSuperuser?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationTeamsApi#enable_teams_api
   */
  readonly enableTeamsApi?: boolean;

  /**
   * @schema OperatorConfigurationConfigurationTeamsApi#pam_configuration
   */
  readonly pamConfiguration?: string;

  /**
   * @schema OperatorConfigurationConfigurationTeamsApi#pam_role_name
   */
  readonly pamRoleName?: string;

  /**
   * @schema OperatorConfigurationConfigurationTeamsApi#postgres_superuser_teams
   */
  readonly postgresSuperuserTeams?: string[];

  /**
   * @schema OperatorConfigurationConfigurationTeamsApi#protected_role_names
   */
  readonly protectedRoleNames?: string[];

  /**
   * @schema OperatorConfigurationConfigurationTeamsApi#role_deletion_suffix
   */
  readonly roleDeletionSuffix?: string;

  /**
   * @schema OperatorConfigurationConfigurationTeamsApi#team_admin_role
   */
  readonly teamAdminRole?: string;

  /**
   * @schema OperatorConfigurationConfigurationTeamsApi#team_api_role_configuration
   */
  readonly teamApiRoleConfiguration?: { [key: string]: string };

  /**
   * @schema OperatorConfigurationConfigurationTeamsApi#teams_api_url
   */
  readonly teamsApiUrl?: string;

}

/**
 * Converts an object of type 'OperatorConfigurationConfigurationTeamsApi' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationConfigurationTeamsApi(obj: OperatorConfigurationConfigurationTeamsApi | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enable_admin_role_for_users': obj.enableAdminRoleForUsers,
    'enable_postgres_team_crd': obj.enablePostgresTeamCrd,
    'enable_postgres_team_crd_superusers': obj.enablePostgresTeamCrdSuperusers,
    'enable_team_member_deprecation': obj.enableTeamMemberDeprecation,
    'enable_team_superuser': obj.enableTeamSuperuser,
    'enable_teams_api': obj.enableTeamsApi,
    'pam_configuration': obj.pamConfiguration,
    'pam_role_name': obj.pamRoleName,
    'postgres_superuser_teams': obj.postgresSuperuserTeams?.map(y => y),
    'protected_role_names': obj.protectedRoleNames?.map(y => y),
    'role_deletion_suffix': obj.roleDeletionSuffix,
    'team_admin_role': obj.teamAdminRole,
    'team_api_role_configuration': ((obj.teamApiRoleConfiguration) === undefined) ? undefined : (Object.entries(obj.teamApiRoleConfiguration).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'teams_api_url': obj.teamsApiUrl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfigurationLoggingRestApi
 */
export interface OperatorConfigurationConfigurationLoggingRestApi {
  /**
   * @schema OperatorConfigurationConfigurationLoggingRestApi#api_port
   */
  readonly apiPort?: number;

  /**
   * @schema OperatorConfigurationConfigurationLoggingRestApi#cluster_history_entries
   */
  readonly clusterHistoryEntries?: number;

  /**
   * @schema OperatorConfigurationConfigurationLoggingRestApi#ring_log_lines
   */
  readonly ringLogLines?: number;

}

/**
 * Converts an object of type 'OperatorConfigurationConfigurationLoggingRestApi' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationConfigurationLoggingRestApi(obj: OperatorConfigurationConfigurationLoggingRestApi | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'api_port': obj.apiPort,
    'cluster_history_entries': obj.clusterHistoryEntries,
    'ring_log_lines': obj.ringLogLines,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfigurationScalyr
 */
export interface OperatorConfigurationConfigurationScalyr {
  /**
   * @schema OperatorConfigurationConfigurationScalyr#scalyr_api_key
   */
  readonly scalyrApiKey?: string;

  /**
   * @schema OperatorConfigurationConfigurationScalyr#scalyr_cpu_limit
   */
  readonly scalyrCpuLimit?: string;

  /**
   * @schema OperatorConfigurationConfigurationScalyr#scalyr_cpu_request
   */
  readonly scalyrCpuRequest?: string;

  /**
   * @schema OperatorConfigurationConfigurationScalyr#scalyr_image
   */
  readonly scalyrImage?: string;

  /**
   * @schema OperatorConfigurationConfigurationScalyr#scalyr_memory_limit
   */
  readonly scalyrMemoryLimit?: string;

  /**
   * @schema OperatorConfigurationConfigurationScalyr#scalyr_memory_request
   */
  readonly scalyrMemoryRequest?: string;

  /**
   * @schema OperatorConfigurationConfigurationScalyr#scalyr_server_url
   */
  readonly scalyrServerUrl?: string;

}

/**
 * Converts an object of type 'OperatorConfigurationConfigurationScalyr' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationConfigurationScalyr(obj: OperatorConfigurationConfigurationScalyr | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'scalyr_api_key': obj.scalyrApiKey,
    'scalyr_cpu_limit': obj.scalyrCpuLimit,
    'scalyr_cpu_request': obj.scalyrCpuRequest,
    'scalyr_image': obj.scalyrImage,
    'scalyr_memory_limit': obj.scalyrMemoryLimit,
    'scalyr_memory_request': obj.scalyrMemoryRequest,
    'scalyr_server_url': obj.scalyrServerUrl,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfigurationConnectionPooler
 */
export interface OperatorConfigurationConfigurationConnectionPooler {
  /**
   * @schema OperatorConfigurationConfigurationConnectionPooler#connection_pooler_schema
   */
  readonly connectionPoolerSchema?: string;

  /**
   * @schema OperatorConfigurationConfigurationConnectionPooler#connection_pooler_user
   */
  readonly connectionPoolerUser?: string;

  /**
   * @schema OperatorConfigurationConfigurationConnectionPooler#connection_pooler_image
   */
  readonly connectionPoolerImage?: string;

  /**
   * @schema OperatorConfigurationConfigurationConnectionPooler#connection_pooler_max_db_connections
   */
  readonly connectionPoolerMaxDbConnections?: number;

  /**
   * @schema OperatorConfigurationConfigurationConnectionPooler#connection_pooler_mode
   */
  readonly connectionPoolerMode?: OperatorConfigurationConfigurationConnectionPoolerConnectionPoolerMode;

  /**
   * @schema OperatorConfigurationConfigurationConnectionPooler#connection_pooler_number_of_instances
   */
  readonly connectionPoolerNumberOfInstances?: number;

  /**
   * @schema OperatorConfigurationConfigurationConnectionPooler#connection_pooler_default_cpu_limit
   */
  readonly connectionPoolerDefaultCpuLimit?: string;

  /**
   * @schema OperatorConfigurationConfigurationConnectionPooler#connection_pooler_default_cpu_request
   */
  readonly connectionPoolerDefaultCpuRequest?: string;

  /**
   * @schema OperatorConfigurationConfigurationConnectionPooler#connection_pooler_default_memory_limit
   */
  readonly connectionPoolerDefaultMemoryLimit?: string;

  /**
   * @schema OperatorConfigurationConfigurationConnectionPooler#connection_pooler_default_memory_request
   */
  readonly connectionPoolerDefaultMemoryRequest?: string;

}

/**
 * Converts an object of type 'OperatorConfigurationConfigurationConnectionPooler' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationConfigurationConnectionPooler(obj: OperatorConfigurationConfigurationConnectionPooler | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'connection_pooler_schema': obj.connectionPoolerSchema,
    'connection_pooler_user': obj.connectionPoolerUser,
    'connection_pooler_image': obj.connectionPoolerImage,
    'connection_pooler_max_db_connections': obj.connectionPoolerMaxDbConnections,
    'connection_pooler_mode': obj.connectionPoolerMode,
    'connection_pooler_number_of_instances': obj.connectionPoolerNumberOfInstances,
    'connection_pooler_default_cpu_limit': obj.connectionPoolerDefaultCpuLimit,
    'connection_pooler_default_cpu_request': obj.connectionPoolerDefaultCpuRequest,
    'connection_pooler_default_memory_limit': obj.connectionPoolerDefaultMemoryLimit,
    'connection_pooler_default_memory_request': obj.connectionPoolerDefaultMemoryRequest,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets
 */
export interface OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets {
  /**
   * @schema OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets#secretname
   */
  readonly secretname: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets#userkey
   */
  readonly userkey: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets#passwordkey
   */
  readonly passwordkey: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets#rolekey
   */
  readonly rolekey?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets#defaultuservalue
   */
  readonly defaultuservalue?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets#defaultrolevalue
   */
  readonly defaultrolevalue?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets#details
   */
  readonly details?: string;

  /**
   * @schema OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets#template
   */
  readonly template?: boolean;

}

/**
 * Converts an object of type 'OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets(obj: OperatorConfigurationConfigurationKubernetesInfrastructureRolesSecrets | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'secretname': obj.secretname,
    'userkey': obj.userkey,
    'passwordkey': obj.passwordkey,
    'rolekey': obj.rolekey,
    'defaultuservalue': obj.defaultuservalue,
    'defaultrolevalue': obj.defaultrolevalue,
    'details': obj.details,
    'template': obj.template,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema OperatorConfigurationConfigurationKubernetesNodeReadinessLabelMerge
 */
export enum OperatorConfigurationConfigurationKubernetesNodeReadinessLabelMerge {
  /** AND */
  AND = 'AND',
  /** OR */
  OR = 'OR',
}

/**
 * @schema OperatorConfigurationConfigurationKubernetesPodManagementPolicy
 */
export enum OperatorConfigurationConfigurationKubernetesPodManagementPolicy {
  /** ordered_ready */
  ORDERED_READY = 'ordered_ready',
  /** parallel */
  PARALLEL = 'parallel',
}

/**
 * @schema OperatorConfigurationConfigurationKubernetesStorageResizeMode
 */
export enum OperatorConfigurationConfigurationKubernetesStorageResizeMode {
  /** ebs */
  EBS = 'ebs',
  /** pvc */
  PVC = 'pvc',
  /** off */
  OFF = 'off',
}

/**
 * @schema OperatorConfigurationConfigurationLoadBalancerExternalTrafficPolicy
 */
export enum OperatorConfigurationConfigurationLoadBalancerExternalTrafficPolicy {
  /** Cluster */
  CLUSTER = 'Cluster',
  /** Local */
  LOCAL = 'Local',
}

/**
 * @schema OperatorConfigurationConfigurationConnectionPoolerConnectionPoolerMode
 */
export enum OperatorConfigurationConfigurationConnectionPoolerConnectionPoolerMode {
  /** session */
  SESSION = 'session',
  /** transaction */
  TRANSACTION = 'transaction',
}

