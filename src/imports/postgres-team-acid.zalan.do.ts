// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema PostgresTeam
 */
export class PostgresTeam extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PostgresTeam"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'acid.zalan.do/v1',
    kind: 'PostgresTeam',
  };

  /**
   * Renders a Kubernetes manifest for "PostgresTeam".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PostgresTeamProps): any {
    return {
      ...PostgresTeam.GVK,
      ...toJson_PostgresTeamProps(props),
    };
  }

  /**
   * Defines a "PostgresTeam" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PostgresTeamProps) {
    super(scope, id, {
      ...PostgresTeam.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...PostgresTeam.GVK,
      ...toJson_PostgresTeamProps(resolved),
    };
  }
}

/**
 * @schema PostgresTeam
 */
export interface PostgresTeamProps {
  /**
   * @schema PostgresTeam#spec
   */
  readonly spec: PostgresTeamSpec;

  /**
   * @schema PostgresTeam#metadata
   */
  readonly metadata?: ApiObjectMetadata;

}

/**
 * Converts an object of type 'PostgresTeamProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PostgresTeamProps(obj: PostgresTeamProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'spec': toJson_PostgresTeamSpec(obj.spec),
    'metadata': obj.metadata,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema PostgresTeamSpec
 */
export interface PostgresTeamSpec {
  /**
   * Map for teamId and associated additional superuser teams
   *
   * @schema PostgresTeamSpec#additionalSuperuserTeams
   */
  readonly additionalSuperuserTeams?: { [key: string]: string[] };

  /**
   * Map for teamId and associated additional teams
   *
   * @schema PostgresTeamSpec#additionalTeams
   */
  readonly additionalTeams?: { [key: string]: string[] };

  /**
   * Map for teamId and associated additional users
   *
   * @schema PostgresTeamSpec#additionalMembers
   */
  readonly additionalMembers?: { [key: string]: string[] };

}

/**
 * Converts an object of type 'PostgresTeamSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_PostgresTeamSpec(obj: PostgresTeamSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'additionalSuperuserTeams': ((obj.additionalSuperuserTeams) === undefined) ? undefined : (Object.entries(obj.additionalSuperuserTeams).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.map(y => y) }), {})),
    'additionalTeams': ((obj.additionalTeams) === undefined) ? undefined : (Object.entries(obj.additionalTeams).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.map(y => y) }), {})),
    'additionalMembers': ((obj.additionalMembers) === undefined) ? undefined : (Object.entries(obj.additionalMembers).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.map(y => y) }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

